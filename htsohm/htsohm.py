import os
import sys
from math import sqrt
from datetime import datetime

from sqlalchemy.sql import func
from sqlalchemy.orm.exc import FlushError
from sqlalchemy.exc import IntegrityError
from sqlalchemy.sql import text
import yaml

import htsohm
from htsohm import config
from htsohm.db import engine, session, Material, MutationStrength
from htsohm import pseudomaterial_generator
from htsohm.simulation.run_all import run_all_simulations

def materials_in_generation(run_id, generation):
    """Count number of materials in a generation.

    Args:
        run_id (str): identification string for run.
        generation (int): iteration in overall bin-mutate-simulate rountine.

    Returns:
        Number(int) of materials in a particular generation that are present in
        the database (the final step in bin-mutate-simulate routine).

    """
    return session.query(Material).filter(
        Material.run_id == run_id,
        Material.generation == generation
    ).count()

def last_generation(run_id):
    """Finds latest generation present in database.

    Args:
        run_id (str): identification string for run.

    Returns:
        Last generation(int) to be included in database.

    """
    return session.query(func.max(Material.generation)).filter(
        Material.run_id == run_id,
    )[0][0]

def get_all_parent_ids(run_id, generation):
    return [e[0] for e in session.query(Material.parent_id) \
            .filter(Material.run_id == run_id, Material.generation == generation) \
            .distinct() if e[0] != None]

def calculate_percent_children_in_bin(run_id, generation, bin_coordinate):
    """Find the fraction of children generated by all parents from a particular
    bin who also belong in the same bin as their parent.

    Args:
        run_id (str): run identification string.
        generation (int): interation in overall process.
        bin (list int): [gas_adsorption_bin, surface_area_bin, void_fraction_bin].

    Returns:
        Fraction of children in the same bin as their parent for all parents in
        a particular bin.
    """
    sql = text("""
        select
            m.gas_adsorption_0_bin,
            m.gas_adsorption_1_bin,
            m.surface_area_bin,
            m.void_fraction_bin,
            (
                m.gas_adsorption_0_bin = p.gas_adsorption_0_bin and
                m.gas_adsorption_1_bin = p.gas_adsorption_1_bin and
                m.surface_area_bin = p.surface_area_bin and
                m.void_fraction_bin = p.void_fraction_bin
            ) as in_bin
        from materials m
        join materials p on (m.parent_id = p.id)
        where m.generation = :gen
            and m.run_id = :run_id
            and p.gas_adsorption_0_bin = :ga0_bin
            and p.gas_adsorption_1_bin = :ga1_bin
            and p.surface_area_bin = :sa_bin
            and p.void_fraction_bin = :vf_bin
        """)

    rows = engine.connect().execute(
        sql,
        gen=generation,
        run_id=run_id,
        ga0_bin=bin_coordinate[0],
        ga1_bin=bin_coordinate[1],
        sa_bin=bin_coordinate[2],
        vf_bin=bin_coordinate[3]
    ).fetchall()

    if (config['interactive_mode'] == 'on' and 
            len([r for r in rows if r.in_bin]) != 0):
        print('Number of children in the parent-bin :\t{}' \
                .format(len([r for r in rows if r.in_bin])))
        print('Total number of children :\t\t{}'.format(len(rows)))

    return len([ r for r in rows if r.in_bin ]) / len(rows)

def double_check():
    while True:
        proceed = input('Are you sure? [y/n] :\t')
        if proceed in ['n', 'N']:
            return False
        elif proceed in ['y', 'Y']:
            return True
        else:
            print('Please enter y/n.')

def set_variable(message, variable_name):
    while True:
        value = input(message)
        print('Setting {} to {} ...'.format(variable_name, value))
        if double_check():
            return value

def calculate_mutation_strength(run_id, generation, mutation_strength_bin):
    """Query mutation_strength for bin and adjust as necessary.

    Args:
        run_id (str): identification string for run.
        generation (int): iteration in bin-mutate-simulate routine.
        parent (sqlalchemy.orm.query.Query): parent-material corresponding to
            the bin being queried.

    Returns:
        mutation_strength.strength (float): mutation strength to be used for
        parents in the bin being queried. If the fraction of children from
        previous generation which populate the SAME bin as their parent is LESS
        THAN 10% then the mutation strength is REDUCED BY 5%. If the fraction
        of these children populating the SAME bin as their parent is GREATER
        THAN 50% then the mutation strength is INCREASED BY 5%.

    """
    mutation_strength_key = [run_id, generation] + mutation_strength_bin
    mutation_strength = session.query(MutationStrength).get(mutation_strength_key)

    if mutation_strength:
        print("Mutation strength already calculated for this bin and generation.")
    else:
        print("Calculating mutation strength...")
        mutation_strength = MutationStrength.get_prior(*mutation_strength_key).clone()
        if config['interactive_mode'] == 'on':
            print('Prior mutation strength :\t{}'.format(mutation_strength.strength))
        mutation_strength.generation = generation

        try:
            fraction_in_parent_bin = calculate_percent_children_in_bin(run_id, generation - 1, mutation_strength_bin)

            if config['interactive_mode'] != 'on':
                if fraction_in_parent_bin < 0.1 and mutation_strength.strength / 1.1 > 0:
                    mutation_strength.strength /= 1.1
                elif fraction_in_parent_bin > 0.5 and mutation_strength.strength * 1.1 < 1:
                    mutation_strength.strength *= 1.1

            elif config['interactive_mode'] == 'on':
                print('\tFor adaptive mutation strength(s), DECREASE strength \n' +
                        '\tby 5% if the fraction of children in parent-bin is \n' +
                        '\tLESS THAN 0.1; INCREASE strength by 5% if the \n' +
                        '\tfraction of children in parent-bin is GREATER THAN \n' +
                        '\t0.5.')
                mutation_strength.strength = set_variable(
                    'Please Enter new mutation strength :\t', 'mutation_strength.strength')
        except ZeroDivisionError:
            print("No prior generation materials in this bin with children.")

        try:
            session.add(mutation_strength)
            session.commit()
        except (FlushError, IntegrityError) as e:
            print("Somebody beat us to saving a row with this generation. That's ok!")
            session.rollback()
            # it's ok b/c this calculation should always yield the exact same result!
    sys.stdout.flush()
    return mutation_strength.strength

def evaluate_convergence(run_id, generation):
    '''Determines convergence by calculating variance of bin-counts.
    
    Args:
        run_id (str): identification string for run.
        generation (int): iteration in bin-mutate-simulate routine.

    Returns:
        bool: True if variance is less than or equal to cutt-off criteria (so
            method will continue running).
    '''
    simulations = config['simulations']
    query_group = []
    if 'gas_adsorption' in simulations:
        query_group.append( getattr(Material, 'gas_adsorption_bin') )
    if 'surface_area' in simulations:
        query_group.append( getattr(Material, 'surface_area_bin') )
    if 'helium_void_fraction' in simulations:
        query_group.append( getattr(Material, 'void_fraction_bin') )

    bin_counts = session \
        .query(func.count(Material.id)) \
        .filter(
            Material.run_id == run_id, Material.generation < generation,
            Material.generation_index < config['children_per_generation']
        ) \
        .group_by(*query_group).all()
    bin_counts = [i[0] for i in bin_counts]    # convert SQLAlchemy result to list
    variance = sqrt( sum([(i - (sum(bin_counts) / len(bin_counts)))**2 for i in bin_counts]) / len(bin_counts))
    print('\nCONVERGENCE:\t%s\n' % variance)
    sys.stdout.flush()
    return variance <= config['convergence_cutoff_criteria']

def print_block(string):
    print('{0}\n{1}\n{0}'.format('=' * 80, string))

def calculate_all_mutation_strengths(config, gen):
    s = session
    m = Material
    run_id = config['run_id']

    # if annealing criteria is not met...
    if config['annealing_on'] != 'on' or gen % config['annealing_frequency'] != 0:
        parent_ids = get_all_parent_ids(run_id, gen)
        print_block('CALCULATING MUTATION STRENGTHS')
        ms_bins = []
        for parent_id in parent_ids:
            parent_bin = s.query(m).get(parent_id).bin
            if parent_bin not in ms_bins:
                # go ahead and calculate mutation strength if non-interactive mode...
                if config['interactive_mode'] != 'on':
                    print('Calculating bin-mutation-strength for bin : {}' \
                            .format(parent_bin))
                    calculate_mutation_strength(run_id, gen + 1, parent_bin)
                
                ms_bins.append(parent_bin)
            
            # calculate each mutation strength one-by-one after user input...
            if config['interactive_mode'] == 'on':
                print('The following bins contain parents for the preceding generation:')
                for some_bin in ms_bins:
                    print('\t{}'.format(some_bin))
                input('Press Enter to begin calculating new mutation strength(s) :')
                counter = 1
                for some_bin in ms_bins:
                    print('\nCalculating strength for bin :\t{}'.format(some_bin))
                    print('Bin {} / {}'.format(counter, len(ms_bins)))
                    calculate_mutation_strength(run_id, gen + 1, parent_bin)
                    input('Press Enter to continue :')

    # annealing to reset all mutation strengths to initial value
    elif config['annealing_on'] == 'on' and gen % config['annealing_frequency'] == 0:
        all_accessed_bin_tuples = s.query(m.gas_adsorption_bin,
                                          m.surface_area_bin,
                                          m.void_fraction_bin) \
                                   .filter(m.run_id == run_id,
                                           m.retest_passed != False,
                                           m.generation_index < config['children_per_generation']) \
                                   .distinct().all()
        all_accessed_bins = [[e[0], e[1], e[2]] for e in all_accessed_bin_tuples]
        print_block('ANNEALING WITH MUTATION STRENGTH :\t{}' \
                .format(config['initial_mutation_strength']))

        if config['interactive_mode'] == 'on':
            print('The following bins have been accessed, for annealing :')

        for some_bin in all_accessed_bins:
            if config['interactive_mode'] == 'false':
                print('Annealing bin :\t{}'.format(some_bin))
                mutation_strength = MutationStrength(run_id, gen + 1, *some_bin)
                mutation_strength.strength = config['annealing_strength']
                session.add(mutation_strength)
            
            if config['interactive_mode'] == 'on':
                print('\t{}'.format(some_bin))

        if config['interactive_mode'] == 'on':
            input('Press Enter to continue :')
            for some_bin in all_accessed_bins:
                print('\nCalculating strength for bin :\t{}'.format(some_bin))
                print('Bin {} / {}'.format(counter, len(ms_bins)))
                mutation_strength = MutationStrength(run_id, gen + 1, *some_bin)
                mutation_strength.strength = input('Enter annealing strength :\t')
                session.add(mutation_strength)
    print('Done calculating mutation strengths!')


def worker_run_loop(run_id):
    """
    Args:
        run_id (str): identification string for run.

    Writes seed generation and simulates properties, then manages overall
    bin-mutate-simualte routine until convergence cutt-off or maximum
    number of generations is reached.

    """
    print('CONFIG\n{0}'.format(config))

    gen = last_generation(run_id) or 0

    converged = False
    while not converged:
        print_block('GENERATION {}'.format(gen))
        size_of_generation = config['children_per_generation']

        while materials_in_generation(run_id, gen) < size_of_generation:

            # generate seed material - first iteration only
            if gen == 0 or config['pseudomaterial_generator'] == 'random':
                print("writing new seed...")
                material = pseudomaterial_generator.random.new_material(run_id, gen)

            # select parent, retest, and mutate to create new material
            else:
                material = pseudomaterial_generator.mutate.new_material(run_id, gen)
            session.commit()

            print("AFTER GENERATE/MUTATE NEW MATERIAL")
            ids = [e[0] for e in session.query(Material.id).filter(Material.run_id==run_id).all()]
            for some_id in ids:
                mat = session.query(Material).get(some_id)
                print("{}\t{}".format(mat.uuid, len(mat.structure.atom_sites)))



            # simulate material properties
            run_all_simulations(material)
            material.ap_unit_cell_volume = float(material.structure.volume)
            material.ap_number_density = float(material.structure.number_density())
            material.ap_average_epsilon = float(material.structure.average_epsilon())
            material.ap_average_sigma = float(material.structure.average_sigma())

            print("AFTER RUNALL SIMULATION")
            ids = [e[0] for e in session.query(Material.id).filter(Material.run_id==run_id).all()]
            for some_id in ids:
                mat = session.query(Material).get(some_id)
                print("{}\t{}".format(mat.uuid, len(mat.structure.atom_sites)))



            session.add(material)
            session.commit()

            # add material to database, as needed
            material.generation_index = material.calculate_generation_index()
            if material.generation_index < config['children_per_generation']:
                print_block('ADDING MATERIAL {}'.format(material.uuid))
                session.add(material)

            # debugging
            print("AFTER ADDING NEW MATERIAL TO DATABASE")
            ids = [e[0] for e in session.query(Material.id).filter(Material.run_id==run_id).all()]
            for some_id in ids:
                mat = session.query(Material).get(some_id)
                print("{}\t{}".format(mat.uuid, len(mat.structure.atom_sites)))

            # pause after adding material for interactive mode
            if config['interactive_mode'] == 'on':
                print("\n\nGeneration :\t{}\nMat. no. :\t{} / {}".format(gen,
                    material.generation_index + 1, config['children_per_generation']))
                input("\nPress Enter to continue...\n")

            # if this is the last worker in a generation, calculate mutation
            # strengths for all accessed bins
            if material.generation_index == config['children_per_generation'] - 1 and gen > 0:
                if config['mutation_strength_method'] != 'flat':
                    calculate_all_mutation_strengths(config, gen)

            else:
                # delete excess rows
                # session.delete(material)
                pass
            session.commit()
            sys.stdout.flush()
        gen += 1
        converged = evaluate_convergence(run_id, gen)
